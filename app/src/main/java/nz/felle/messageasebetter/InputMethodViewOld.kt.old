package nz.felle.messageasebetter

import android.content.Context
import android.content.res.Resources
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Point
import android.graphics.PointF
import android.graphics.Rect
import android.graphics.RectF
import android.graphics.drawable.Drawable
import android.graphics.fonts.Font
import android.util.AttributeSet
import android.util.Log
import android.view.Gravity
import android.view.MotionEvent
import android.view.View
import android.view.inputmethod.EditorInfo
import android.view.inputmethod.InputConnection
import android.widget.FrameLayout
import android.widget.Toast
import androidx.appcompat.content.res.AppCompatResources
import kotlin.math.roundToInt

/*
sealed interface ActionShower {
	fun show(canvas: Canvas, centerX: Float, centerY: Float, paint: Paint)
}
data class TextShower(val text: String): ActionShower {
	override fun show(canvas: Canvas, centerX: Float, centerY: Float, paint: Paint) {
		val bounds = Rect()
		paint.getTextBounds(text, 0, text.length, bounds)
		canvas.drawText(text,
			centerX,
			centerY + (bounds.height().toFloat() / 2),
			paint
		)
	}
}
data class IconShower(val drawable: Drawable): ActionShower {
	override fun show(canvas: Canvas, centerX: Float, centerY: Float, paint: Paint) {
		val size = paint.textSize.toInt()
		val offset = paint.textSize / 2
		val left = (centerX - offset).toInt()
		val top = (centerY - offset).toInt()
		drawable.setBounds(left, top, left + size, top + size)
		drawable.draw(canvas)
	}
}

interface Action {
	fun execute(view: InputMethodView)
	fun show(view: InputMethodView): ActionShower?
	fun secondary(): Boolean
}

data class SecondaryKeyAction(val key: Char): Action {
	override fun execute(view: InputMethodView) = view.insert(key)
	override fun show(view: InputMethodView): ActionShower = TextShower(key.toString())
	override fun secondary() = true
}

data class KeyAction(val normalKey: Char?, val numKey: Char?): Action {
	override fun execute(view: InputMethodView) {
		if (view.numMode) {
			view.insert(numKey ?: return)
		} else if (view.caps) {
			view.insert(normalKey?.uppercaseChar() ?: return)
		} else {
			view.insert(normalKey ?: return)
		}
	}

	override fun show(view: InputMethodView) = (if (view.numMode) {
		numKey
	} else if (view.caps) {
		normalKey?.uppercaseChar()
	} else {
		normalKey
	})?.toString()?.let { TextShower(it) }

	override fun secondary() = false
}

data class FuncAction(
	val executeFunc: (InputMethodView) -> Unit,
	val showFunc: (InputMethodView) -> ActionShower?,
): Action {
	override fun execute(view: InputMethodView) = executeFunc(view)
	override fun show(view: InputMethodView) = showFunc(view)
	override fun secondary() = false
}
*/

@Suppress("PrivatePropertyName")
class InputMethodViewOld @JvmOverloads constructor(
	context: Context,
	attrs: AttributeSet? = null,
	defStyleAttr: Int = 0
): View(context, attrs, defStyleAttr) {
	private val STROKE_WIDTH = 10.0f
	private val RADIUS = 20.0f

	private val ACTIONS: Array<Array<Map<Line.Motion, Action>>> = arrayOf(
		// first row
		arrayOf(
			// first row, first column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('a', '1')),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction('$')),
				Pair(Line.Motion.DOWN, SecondaryKeyAction('·')),
				Pair(Line.Motion.DOWN_RIGHT, KeyAction('v', KeyAction.NONE)),
				Pair(Line.Motion.RIGHT, SecondaryKeyAction('-'))
			),
			// first row, second column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('n', '2')),
				Pair(Line.Motion.UP_LEFT, SecondaryKeyAction('`')),
				Pair(Line.Motion.UP, SecondaryKeyAction('^')),
				Pair(Line.Motion.RIGHT, SecondaryKeyAction('!')),
				Pair(Line.Motion.DOWN_RIGHT, SecondaryKeyAction('\\')),
				Pair(Line.Motion.DOWN, KeyAction('l', KeyAction.NONE)),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction('/')),
				Pair(Line.Motion.LEFT, SecondaryKeyAction('+')),
			),
			// first row, third column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('i', '3')),
				Pair(Line.Motion.LEFT, SecondaryKeyAction('?')),
				Pair(Line.Motion.DOWN_LEFT, KeyAction('x', null)),
				Pair(Line.Motion.DOWN, SecondaryKeyAction('=')),
				Pair(Line.Motion.DOWN_RIGHT, SecondaryKeyAction('€')),
			),
			// first row, fourth column
			mapOf(
			),
		),
		// second row
		arrayOf(
			// second row, first column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('h', '4')),
				Pair(Line.Motion.UP_LEFT, SecondaryKeyAction('{')),
				Pair(Line.Motion.LEFT, SecondaryKeyAction('(')),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction('[')),
				Pair(Line.Motion.DOWN_RIGHT, SecondaryKeyAction('_')),
				Pair(Line.Motion.RIGHT, KeyAction('k', null)),
				Pair(Line.Motion.UP_RIGHT, SecondaryKeyAction('%')),
			),
			// second row, second column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('o', '5')),
				Pair(Line.Motion.UP_LEFT, KeyAction('q', null)),
				Pair(Line.Motion.UP, KeyAction('u', null)),
				Pair(Line.Motion.UP_RIGHT, KeyAction('p', null)),
				Pair(Line.Motion.RIGHT, KeyAction('b', null)),
				Pair(Line.Motion.DOWN_RIGHT, KeyAction('j', null)),
				Pair(Line.Motion.DOWN, KeyAction('d', null)),
				Pair(Line.Motion.DOWN_LEFT, KeyAction('g', null)),
				Pair(Line.Motion.LEFT, KeyAction('c', null)),
			),
			// second row, third column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('r', '6')),
				Pair(Line.Motion.UP_LEFT, SecondaryKeyAction('|')),
				Pair(Line.Motion.UP, FuncAction({ it.caps = true }, { null })),
				Pair(Line.Motion.UP_RIGHT, SecondaryKeyAction('}')),
				Pair(Line.Motion.RIGHT, SecondaryKeyAction(')')),
				Pair(Line.Motion.DOWN_RIGHT, SecondaryKeyAction(']')),
				Pair(Line.Motion.DOWN, FuncAction({ it.caps = false }, { null })),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction('@')),
				Pair(Line.Motion.LEFT, KeyAction('m', null)),
			),
			// second row, fourth column
			mapOf(
				Pair(Line.Motion.NONE, FuncAction({ it.numMode = !it.numMode }, run {
					val make = { id: Int -> IconShower(AppCompatResources.getDrawable(this.context, id)!!) }
					val ifNum = make(R.drawable.ic_abc_mode)
					val ifNotNum = make(R.drawable.ic_num_mode);
					{ view: InputMethodView ->
						if (view.numMode) { ifNum } else { ifNotNum }
					}
				})),
			),
		),
		// third row
		arrayOf(
			// third row, first column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('t', '7')),
				Pair(Line.Motion.UP_LEFT, SecondaryKeyAction('~')),
				Pair(Line.Motion.UP, SecondaryKeyAction('¨')),
				Pair(Line.Motion.UP_RIGHT, KeyAction('y', null)),
				Pair(Line.Motion.RIGHT, SecondaryKeyAction('*')),
				Pair(Line.Motion.LEFT, SecondaryKeyAction('<')),
				Pair(Line.Motion.DOWN, SecondaryKeyAction('–')),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction('—')),
			),
			// third row, second column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('e', '8')),
				Pair(Line.Motion.UP_LEFT, SecondaryKeyAction('"')),
				Pair(Line.Motion.UP, KeyAction('w', null)),
				Pair(Line.Motion.UP_RIGHT, SecondaryKeyAction('\'')),
				Pair(Line.Motion.RIGHT, KeyAction('z', null)),
				Pair(Line.Motion.DOWN_RIGHT, SecondaryKeyAction(':')),
				Pair(Line.Motion.DOWN, SecondaryKeyAction('.')),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction(',')),
			),
			// third row, third column
			mapOf(
				Pair(Line.Motion.NONE, KeyAction('s', '9')),
				Pair(Line.Motion.UP_LEFT, KeyAction('f', null)),
				Pair(Line.Motion.UP, SecondaryKeyAction('&')),
				Pair(Line.Motion.UP_RIGHT, SecondaryKeyAction('°')),
				Pair(Line.Motion.RIGHT, SecondaryKeyAction('>')),
				Pair(Line.Motion.DOWN_LEFT, SecondaryKeyAction(';')),
				Pair(Line.Motion.LEFT, SecondaryKeyAction(';')),
			),
			// third row, fourth column
			mapOf(
				Pair(Line.Motion.NONE, FuncAction({ it.backspace() }, run {
					val drawable = IconShower(AppCompatResources.getDrawable(this.context, R.drawable.ic_backspace)!!);
					{ drawable }
				})),
			),
		),
		// fourth row
		arrayOf(
			// zero
			mapOf(
				Pair(Line.Motion.NONE, KeyAction(null, '0')),
			),
			// space
			mapOf(
				Pair(Line.Motion.NONE, FuncAction({ it.insert(' ') }, { null })),
				Pair(Line.Motion.LEFT, FuncAction({ it.moveCursor(-1) }, { null })),
				Pair(Line.Motion.RIGHT, FuncAction({ it.moveCursor(1) }, { null })),
			),
			// editor action
			mapOf(
				Pair(Line.Motion.NONE, FuncAction({ it.conn.performEditorAction(actAction) }, { view -> view.actString?.let{ TextShower(it) } }))
			)
		),
	)

	private val backgroundColor = resources.getColor(R.color.keyboard_background, context.theme)
	private val buttonPaint = Paint().apply{
		this.color = resources.getColor(R.color.keyboard_button_outline, context.theme)
		this.strokeWidth = STROKE_WIDTH
		this.style = Paint.Style.STROKE
		this.strokeCap = Paint.Cap.ROUND
	}
	private val keyTextPaint = Paint().apply{
		this.textAlign = Paint.Align.CENTER
		this.color = resources.getColor(R.color.keyboard_key_text_color, context.theme)
		this.style = Paint.Style.FILL
		this.textSize = 60.0f
	}
	private val smallKeyTextPaint = Paint().apply{
		this.textAlign = Paint.Align.CENTER
		this.color = resources.getColor(R.color.keyboard_key_text_color, context.theme)
		this.style = Paint.Style.FILL
		this.textSize = 32.0f
	}
	private val secondaryKeyTextPaint = Paint(smallKeyTextPaint).apply{
		this.color = resources.getColor(R.color.keyboard_key_text_color_secondary, context.theme)
	}
	private val linePaint = buttonPaint

	private val buttonWidth get() = width / 4.0f
	private val buttonHeight get() = height / 4.0f

	internal lateinit var conn: InputConnection

	private var _numMode = false
	internal var numMode
		get() = _numMode
		set(newVal) {
			val oldVal = _numMode
			_numMode = newVal
			if (oldVal != newVal) {
				this.postInvalidate()
			}
		}
	internal var caps = false

	internal var actAction: Int = EditorInfo.IME_ACTION_UNSPECIFIED
	private val actString
		get() = when (actAction) {
			EditorInfo.IME_ACTION_DONE -> "Done"
			EditorInfo.IME_ACTION_GO -> "Go"
			EditorInfo.IME_ACTION_NEXT -> "Next"
			EditorInfo.IME_ACTION_PREVIOUS -> "Prev"
			EditorInfo.IME_ACTION_SEARCH -> "Search"
			EditorInfo.IME_ACTION_SEND -> "Send"
			EditorInfo.IME_ACTION_NONE -> null
			else -> "Enter"
		}
	private val actShower
		get() = actString?.let { TextShower(it) }

	private data class Line constructor(
		var startX: Float,
		var startY: Float,
		var endX: Float,
		var endY: Float,
	) {
		val deltaX get() = endX - startX
		val deltaY get() = endY - startY

		enum class Motion {
			NONE,
			UP,
			DOWN,
			LEFT,
			RIGHT,
			UP_RIGHT,
			UP_LEFT,
			DOWN_RIGHT,
			DOWN_LEFT,;

			fun offset(centerX: Float, centerY: Float, offsetX: Float, offsetY: Float): Pair<Float, Float> {
				val x = when (this) {
					UP_LEFT, LEFT, DOWN_LEFT -> centerX - offsetX
					UP, NONE, DOWN -> centerX
					UP_RIGHT, RIGHT, DOWN_RIGHT -> centerX + offsetX
				}
				val y = when (this) {
					UP_LEFT, UP, UP_RIGHT -> centerY - offsetY
					LEFT, NONE, RIGHT -> centerY
					DOWN_LEFT, DOWN, DOWN_RIGHT -> centerY + offsetY
				}
				return Pair(x, y)
			}
		}

		fun getMotion(motionThresholdX: Float, motionThresholdY: Float): Motion = when {
			deltaX > motionThresholdX -> when {
				deltaY > motionThresholdY -> Motion.DOWN_RIGHT // down = greater Y
				deltaY < -motionThresholdY -> Motion.UP_RIGHT
				else -> Motion.RIGHT
			}
			deltaX < -motionThresholdX -> when {
				deltaY > motionThresholdY -> Motion.DOWN_LEFT
				deltaY < -motionThresholdY -> Motion.UP_LEFT
				else -> Motion.LEFT
			}
			else -> when {
				deltaY > motionThresholdY -> Motion.DOWN
				deltaY < -motionThresholdY -> Motion.UP
				else -> Motion.NONE
			}
		}
	}

	private var line: Line? = null

	private data class Selection(var start: Int, var end: Int) {
		val length get() = end - start
		val nonCursor get() = length > 0
	}
	private val selection = Selection(0, 0)
	fun updateSelection(newStart: Int, newEnd: Int) {
		selection.start = newStart
		selection.end = newEnd
	}

	private val repeater = Repeater { this.processLine() }

	private fun complainAboutMissingAction(row: Int, col: Int, motion: Line.Motion) {
		Toast.makeText(context, "no action for row ${row}, col ${col}, motion $motion", Toast.LENGTH_SHORT).show()
	}

	internal fun insert(ch: Char) {
		conn.commitText(ch.toString(), 1)
	}

	internal fun backspace() {
		if (selection.nonCursor) {
			val selectionLen = selection.length
			conn.beginBatchEdit()
			conn.setSelection(selection.end, selection.end)
			conn.deleteSurroundingText(selectionLen, 0)
			conn.endBatchEdit()
		} else {
			conn.deleteSurroundingTextInCodePoints(1, 0)
		}
	}

	internal fun moveCursor(offset: Int) {
		val newPosition = if (selection.nonCursor) {
			if (offset > 0) {
				selection.end
			} else {
				selection.start
			}
		} else {
			selection.start + offset
		}

		if (newPosition >= 0) {
			conn.setSelection(newPosition, newPosition)
		}
	}

	override fun onAttachedToWindow() {
		super.onAttachedToWindow()
		val params = layoutParams as? FrameLayout.LayoutParams
		params?.gravity = Gravity.BOTTOM
		params?.height = (resources.displayMetrics.density * 360.0).roundToInt()
		layoutParams = params
	}

	private fun drawButton(
		canvas: Canvas,
		x: Float,
		y: Float,
		width: Float,
		height: Float,
	) {
		canvas.drawRoundRect(x + STROKE_WIDTH,
			y + STROKE_WIDTH,
			x + width - STROKE_WIDTH,
			y + height - STROKE_WIDTH,
			RADIUS,
			RADIUS,
			buttonPaint)
	}

	private fun drawButton(
		canvas: Canvas,
		x: Float,
		y: Float,
		width: Float,
		height: Float,
		key: ActionShower?,
	) {
		drawButton(canvas, x, y, width, height)
		key?.show(canvas, x + (width / 2), y + (height / 2), keyTextPaint)
	}

	private fun drawButton(
		canvas: Canvas,
		x: Float,
		y: Float,
		width: Float,
		height: Float,
		keys: Map<Line.Motion, Action>,
	) {
		drawButton(canvas, x, y, width, height, keys[Line.Motion.NONE]?.show(this))
		val centerX = x + (width / 2)
		val centerY = y + (height / 2)
		val offsetX = (centerX - x) - 40
		val offsetY = (centerY - y) - 40
		for ((motion, action) in keys) {
			if (motion == Line.Motion.NONE) {
				continue
			}
			val actionShower = action.show(this)
			if (actionShower != null) {
				val paint = if (action.secondary()) {
					secondaryKeyTextPaint
				} else {
					smallKeyTextPaint
				}
				val (thisLetterX, thisLetterY) = motion.offset(centerX, centerY, offsetX, offsetY)

				actionShower.show(canvas, thisLetterX, thisLetterY, paint)
			}
		}
	}

	private fun processLine() {
		val motionThresholdX = buttonWidth / 4
		val motionThresholdY = buttonHeight / 4

		val line = line!!
		val motion = line.getMotion(motionThresholdX, motionThresholdY)
		val row = ((line.startY - y) / buttonHeight).toInt()
		val colFrac = (line.startX - x) / buttonWidth
		val col = colFrac.toInt()

		val (actionRow, actionCol) = if (row == 3) {
			Pair(3, when {
				numMode && colFrac < 1.5 -> 0
				colFrac < 3 -> 1
				else -> 2
			})
		} else {
			Pair(row, col)
		}

		val action = ACTIONS[actionRow][actionCol][motion]
		if (action != null) {
			action.execute(this)
		} else {
			complainAboutMissingAction(row, col, motion)
		}
	}

	override fun onTouchEvent(event: MotionEvent?): Boolean {
		if (event == null) {
			return super.onTouchEvent(event)
		}

		return when (event.actionMasked) {
			MotionEvent.ACTION_DOWN -> {
				line = Line(event.x, event.y, event.x, event.y)
				repeater.start()
				postInvalidate()
				true
			}
			MotionEvent.ACTION_MOVE -> {
				line?.endX = event.x
				line?.endY = event.y
				postInvalidate()
				true
			}
			MotionEvent.ACTION_UP -> {
				val hasExecuted = repeater.hasExecuted
				repeater.stop()
				if (!hasExecuted) {
					processLine()
				}
				line = null
				postInvalidate()
				true
			}
			else -> false
		}
	}

	val zeroShower = TextShower("0")
	override fun onDraw(canvas: Canvas?) {
		super.onDraw(canvas)

		if (canvas == null) {
			return
		}

		canvas.drawColor(backgroundColor)

		for (row in 0 until 3) {
			val y = row * buttonHeight
			for (col in 0 until 4) {
				val x = col * buttonWidth
				drawButton(canvas,
					x,
					y,
					buttonWidth,
					buttonHeight,
					ACTIONS[row][col])
			}
		}

		// render the fourth row manually
		val lastRowY = 3 * buttonHeight
		if (numMode) {
			val theseWidth = buttonWidth * 1.5f
			drawButton(canvas, 0.0f, lastRowY, theseWidth, buttonHeight, zeroShower)
			drawButton(canvas, theseWidth, lastRowY, theseWidth, buttonHeight, null)
		} else {
			drawButton(canvas, 0.0f, lastRowY, buttonWidth * 3, buttonHeight, null)
		}

		drawButton(canvas, buttonWidth * 3, lastRowY, buttonWidth, buttonHeight, actShower)

		val line = line // copy locally to avoid possible mutation that results in it being null
		if (line != null) {
			canvas.drawLine(line.startX, line.startY, line.endX, line.endY, linePaint)
		}
	}
}
